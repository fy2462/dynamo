# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release Dependency Snapshot

on:
  push:
    branches:
      - 'release/*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  snapshot-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: pip install pyyaml
      
      - name: Extract version from branch or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract from branch name: release/1.2.3 -> 1.2.3
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/release\///')
          fi
          
          # Validate version format (X.Y.Z)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format '$VERSION'. Expected X.Y.Z"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Creating dependency snapshot for version: v$VERSION"
      
      - name: Run dependency extraction
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create versioned snapshot
          mkdir -p .github/reports/releases
          python3 .github/workflows/extract_dependency_versions.py \
            --output .github/reports/releases/dependency_versions_v${VERSION}.csv
          
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      
      - name: Check if snapshot already exists
        id: check_exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if this version snapshot already exists in git
          if git ls-files --error-unmatch ".github/reports/releases/dependency_versions_v${VERSION}.csv" 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Snapshot for v${VERSION} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Creating new snapshot for v${VERSION}"
          fi
      
      - name: Create Pull Request
        if: steps.check_exists.outputs.exists == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: Add dependency snapshot for release v${{ steps.version.outputs.version }}'
          title: '[Release] Dependency Snapshot v${{ steps.version.outputs.version }}'
          body: |
            ## 📸 Release Dependency Snapshot
            
            This PR adds a permanent dependency snapshot for **release v${{ steps.version.outputs.version }}**.
            
            ### 📋 Files Added
            - `.github/reports/releases/dependency_versions_v${{ steps.version.outputs.version }}.csv`
            
            ### 📊 Purpose
            This snapshot captures the exact dependency versions used in this release for:
            - 🔍 Historical tracking and auditing
            - 🐛 Debugging version-specific issues
            - 📈 Comparing dependency evolution across releases
            - 🔒 Compliance and security reviews
            
            ### ✔️ Review Checklist
            - [ ] Verify this is the correct release version
            - [ ] Check that snapshot doesn't already exist
            - [ ] Review any new or changed dependencies
            
            ---
            
            🔗 **Release Branch:** `${{ github.ref_name }}`
            📦 **Version:** v${{ steps.version.outputs.version }}
            
            _Generated by release dependency snapshot workflow_
          branch: release-snapshot/v${{ steps.version.outputs.version }}
          delete-branch: true
          labels: |
            release
            dependencies
            documentation
      
      - name: Upload snapshot artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-snapshot-v${{ steps.version.outputs.version }}
          path: .github/reports/releases/dependency_versions_v${{ steps.version.outputs.version }}.csv
          retention-days: 365  # Keep release snapshots for 1 year
      
      - name: Summary
        if: always()
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "## Release Dependency Snapshot" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.check_exists.outputs.exists }}" == "true" ]]; then
            echo "ℹ️ **Snapshot Already Exists**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "A dependency snapshot for v${VERSION} already exists in the repository." >> $GITHUB_STEP_SUMMARY
            echo "No PR will be created." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Snapshot Created**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- Version: v${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "- File: \`.github/reports/releases/dependency_versions_v${VERSION}.csv\`" >> $GITHUB_STEP_SUMMARY
            echo "- Action: PR created for review" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📝 A pull request has been created to add this snapshot to the repository." >> $GITHUB_STEP_SUMMARY
          fi

